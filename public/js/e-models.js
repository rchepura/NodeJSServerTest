/**
* Generated by Magnet Codegen tool version 2.3.0
*/

(function(exports, isNode){ var MagnetJS = isNode ? require('../../target/magnet-sdk') : exports;

  //-------------model definiton for User-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.User = function(){
    this.name = 'User';

    this.schema = {
      'lastName' : {
        type     : 'string',
        optional : false
      }, 
      'picUrl' : {
        type     : 'string',
        optional : false
      }, 
      'mmxId' : {
        type     : 'string',
        optional : false
      }, 
      'status' : {
        type     : 'UserStatus ',
        optional : false
      }, 
      'speciality' : {
        type     : 'string',
        optional : false
      }, 
      'password' : {
        type     : 'string',
        optional : false
      }, 
      'city' : {
        type     : 'string',
        optional : false
      }, 
      'id' : {
        type     : 'string',
        optional : false
      }, 
      'email' : {
        type     : 'string',
        optional : false
      }, 
      'managerId' : {
        type     : 'string',
        optional : false
      }, 
      'role' : {
        type     : 'UserRoles ',
        optional : false
      }, 
      'creationTime' : {
        type     : 'long',
        optional : false
      }, 
      'posId' : {
        type     : 'string',
        optional : false
      }, 
      'firstName' : {
        type     : 'string',
        optional : false
      }, 
      'storeId' : {
        type     : 'string',
        optional : false
      }
    };
    /**
    * @property {string lastName]
    * @property {string picUrl]
    * @property {string mmxId]
    * @property {UserStatus  status]
    * @property {string speciality]
    * @property {string password]
    * @property {string city]
    * @property {string id]
    * @property {string email]
    * @property {string managerId]
    * @property {UserRoles  role]
    * @property {long creationTime]
    * @property {string posId]
    * @property {string firstName]
    * @property {string storeId]
    **/
    this.attributes = {
      'lastName'                      : null, 
      'picUrl'                        : null, 
      'mmxId'                         : null, 
      'status'                        : null, 
      'speciality'                    : null, 
      'password'                      : null, 
      'city'                          : null, 
      'id'                            : null, 
      'email'                         : null, 
      'managerId'                     : null, 
      'role'                          : null, 
      'creationTime'                  : null, 
      'posId'                         : null, 
      'firstName'                     : null, 
      'storeId'                       : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.User.prototype = new MagnetJS.Model();
  MagnetJS.Models.User.prototype.constructor = MagnetJS.Models.User;

  //-------------model definiton for UserResponse-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.UserResponse = function(){
    this.name = 'UserResponse';

    this.schema = {
      'status' : {
        type     : 'ResponseStatus ',
        optional : false
      }, 
      'user' : {
        type     : 'User *',
        optional : false
      }
    };
    /**
    * @property {ResponseStatus  status]
    * @property {User * user]
    **/
    this.attributes = {
      'status'                        : null, 
      'user'                          : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.UserResponse.prototype = new MagnetJS.Model();
  MagnetJS.Models.UserResponse.prototype.constructor = MagnetJS.Models.UserResponse;

  //-------------model definiton for ShowAndTell-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.ShowAndTell = function(){
    this.name = 'ShowAndTell';

    this.schema = {
      'id' : {
        type     : 'string',
        optional : false
      }, 
      'author' : {
        type     : 'User *',
        optional : false
      }, 
      'title' : {
        type     : 'string',
        optional : false
      }, 
      'mmxid' : {
        type     : 'string',
        optional : false
      }, 
      'text' : {
        type     : 'string',
        optional : false
      }, 
      'userLike' : {
        type     : 'BOOL',
        optional : false
      }, 
      'picUrl' : {
        type     : 'string',
        optional : false
      }, 
      'updated' : {
        type     : 'long',
        optional : false
      }, 
      'created' : {
        type     : 'long',
        optional : false
      }, 
      'likesCount' : {
        type     : 'long',
        optional : false
      }, 
      'commentsCount' : {
        type     : 'long',
        optional : false
      }, 
      'comments' : {
        type     : 'Comment *[]',
        optional : false
      }
    };
    /**
    * @property {string id]
    * @property {User * author]
    * @property {string title]
    * @property {string mmxid]
    * @property {string text]
    * @property {BOOL userLike]
    * @property {string picUrl]
    * @property {long updated]
    * @property {long created]
    * @property {long likesCount]
    * @property {long commentsCount]
    * @property {Comment *[] comments]
    **/
    this.attributes = {
      'id'                            : null, 
      'author'                        : null, 
      'title'                         : null, 
      'mmxid'                         : null, 
      'text'                          : null, 
      'userLike'                      : null, 
      'picUrl'                        : null, 
      'updated'                       : null, 
      'created'                       : null, 
      'likesCount'                    : null, 
      'commentsCount'                 : null, 
      'comments'                      : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.ShowAndTell.prototype = new MagnetJS.Model();
  MagnetJS.Models.ShowAndTell.prototype.constructor = MagnetJS.Models.ShowAndTell;

  //-------------model definiton for Comment-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.Comment = function(){
    this.name = 'Comment';

    this.schema = {
      'id' : {
        type     : 'string',
        optional : false
      }, 
      'author' : {
        type     : 'User *',
        optional : false
      }, 
      'text' : {
        type     : 'string',
        optional : false
      }, 
      'created' : {
        type     : 'long',
        optional : false
      }
    };
    /**
    * @property {string id]
    * @property {User * author]
    * @property {string text]
    * @property {long created]
    **/
    this.attributes = {
      'id'                            : null, 
      'author'                        : null, 
      'text'                          : null, 
      'created'                       : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.Comment.prototype = new MagnetJS.Model();
  MagnetJS.Models.Comment.prototype.constructor = MagnetJS.Models.Comment;

  //-------------model definiton for IdeaUpload-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.IdeaUpload = function(){
    this.name = 'IdeaUpload';

    this.schema = {
      'id' : {
        type     : 'string',
        optional : false
      }, 
      'author' : {
        type     : 'User *',
        optional : false
      }, 
      'title' : {
        type     : 'string',
        optional : false
      }, 
      'mmxid' : {
        type     : 'string',
        optional : false
      }, 
      'text' : {
        type     : 'string',
        optional : false
      }, 
      'expires' : {
        type     : 'long',
        optional : false
      }, 
      'updated' : {
        type     : 'long',
        optional : false
      }, 
      'created' : {
        type     : 'long',
        optional : false
      }, 
      'possibleAnswers' : {
        type     : 'string[]',
        optional : false
      }, 
      'type' : {
        type     : 'TopicType ',
        optional : false
      }
    };
    /**
    * @property {string id]
    * @property {User * author]
    * @property {string title]
    * @property {string mmxid]
    * @property {string text]
    * @property {long expires]
    * @property {long updated]
    * @property {long created]
    * @property {string[] possibleAnswers]
    * @property {TopicType  type]
    **/
    this.attributes = {
      'id'                            : null, 
      'author'                        : null, 
      'title'                         : null, 
      'mmxid'                         : null, 
      'text'                          : null, 
      'expires'                       : null, 
      'updated'                       : null, 
      'created'                       : null, 
      'possibleAnswers'               : null, 
      'type'                          : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.IdeaUpload.prototype = new MagnetJS.Model();
  MagnetJS.Models.IdeaUpload.prototype.constructor = MagnetJS.Models.IdeaUpload;

  //-------------model definiton for TopicInfosResponse-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.TopicInfosResponse = function(){
    this.name = 'TopicInfosResponse';

    this.schema = {
      'total' : {
        type     : 'long',
        optional : false
      }, 
      'topicInfos' : {
        type     : 'TopicInfo *[]',
        optional : false
      }, 
      'status' : {
        type     : 'ResponseStatus ',
        optional : false
      }
    };
    /**
    * @property {long total]
    * @property {TopicInfo *[] topicInfos]
    * @property {ResponseStatus  status]
    **/
    this.attributes = {
      'total'                         : null, 
      'topicInfos'                    : null, 
      'status'                        : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.TopicInfosResponse.prototype = new MagnetJS.Model();
  MagnetJS.Models.TopicInfosResponse.prototype.constructor = MagnetJS.Models.TopicInfosResponse;

  //-------------model definiton for IdeaResponse-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.IdeaResponse = function(){
    this.name = 'IdeaResponse';

    this.schema = {
      'total' : {
        type     : 'long',
        optional : false
      }, 
      'idea' : {
        type     : 'Idea *',
        optional : false
      }, 
      'status' : {
        type     : 'ResponseStatus ',
        optional : false
      }
    };
    /**
    * @property {long total]
    * @property {Idea * idea]
    * @property {ResponseStatus  status]
    **/
    this.attributes = {
      'total'                         : null, 
      'idea'                          : null, 
      'status'                        : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.IdeaResponse.prototype = new MagnetJS.Model();
  MagnetJS.Models.IdeaResponse.prototype.constructor = MagnetJS.Models.IdeaResponse;

  //-------------model definiton for EchoResponse-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.EchoResponse = function(){
    this.name = 'EchoResponse';

    this.schema = {
      'incoming' : {
        type     : 'string',
        optional : false
      }, 
      'receivedAt' : {
        type     : 'long',
        optional : false
      }
    };
    /**
    * @property {string incoming]
    * @property {long receivedAt]
    **/
    this.attributes = {
      'incoming'                      : null, 
      'receivedAt'                    : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.EchoResponse.prototype = new MagnetJS.Model();
  MagnetJS.Models.EchoResponse.prototype.constructor = MagnetJS.Models.EchoResponse;

  //-------------model definiton for ShowAndTellManyResponse-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.ShowAndTellManyResponse = function(){
    this.name = 'ShowAndTellManyResponse';

    this.schema = {
      'total' : {
        type     : 'long',
        optional : false
      }, 
      'showAndTells' : {
        type     : 'ShowAndTell *[]',
        optional : false
      }, 
      'status' : {
        type     : 'ResponseStatus ',
        optional : false
      }
    };
    /**
    * @property {long total]
    * @property {ShowAndTell *[] showAndTells]
    * @property {ResponseStatus  status]
    **/
    this.attributes = {
      'total'                         : null, 
      'showAndTells'                  : null, 
      'status'                        : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.ShowAndTellManyResponse.prototype = new MagnetJS.Model();
  MagnetJS.Models.ShowAndTellManyResponse.prototype.constructor = MagnetJS.Models.ShowAndTellManyResponse;

  //-------------model definiton for Idea-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.Idea = function(){
    this.name = 'Idea';

    this.schema = {
      'text' : {
        type     : 'string',
        optional : false
      }, 
      'answers' : {
        type     : 'Comment *[]',
        optional : false
      }, 
      'votes' : {
        type     : 'Vote *[]',
        optional : false
      }, 
      'type' : {
        type     : 'TopicType ',
        optional : false
      }, 
      'id' : {
        type     : 'string',
        optional : false
      }, 
      'author' : {
        type     : 'User *',
        optional : false
      }, 
      'mmxid' : {
        type     : 'string',
        optional : false
      }, 
      'title' : {
        type     : 'string',
        optional : false
      }, 
      'expires' : {
        type     : 'long',
        optional : false
      }, 
      'created' : {
        type     : 'long',
        optional : false
      }, 
      'updated' : {
        type     : 'long',
        optional : false
      }, 
      'userVote' : {
        type     : 'string',
        optional : false
      }, 
      'answersCount' : {
        type     : 'long',
        optional : false
      }
    };
    /**
    * @property {string text]
    * @property {Comment *[] answers]
    * @property {Vote *[] votes]
    * @property {TopicType  type]
    * @property {string id]
    * @property {User * author]
    * @property {string mmxid]
    * @property {string title]
    * @property {long expires]
    * @property {long created]
    * @property {long updated]
    * @property {string userVote]
    * @property {long answersCount]
    **/
    this.attributes = {
      'text'                          : null, 
      'answers'                       : null, 
      'votes'                         : null, 
      'type'                          : null, 
      'id'                            : null, 
      'author'                        : null, 
      'mmxid'                         : null, 
      'title'                         : null, 
      'expires'                       : null, 
      'created'                       : null, 
      'updated'                       : null, 
      'userVote'                      : null, 
      'answersCount'                  : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.Idea.prototype = new MagnetJS.Model();
  MagnetJS.Models.Idea.prototype.constructor = MagnetJS.Models.Idea;

  //-------------model definiton for ShowAndTellResponse-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.ShowAndTellResponse = function(){
    this.name = 'ShowAndTellResponse';

    this.schema = {
      'status' : {
        type     : 'ResponseStatus ',
        optional : false
      }, 
      'showAndTell' : {
        type     : 'ShowAndTell *',
        optional : false
      }
    };
    /**
    * @property {ResponseStatus  status]
    * @property {ShowAndTell * showAndTell]
    **/
    this.attributes = {
      'status'                        : null, 
      'showAndTell'                   : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.ShowAndTellResponse.prototype = new MagnetJS.Model();
  MagnetJS.Models.ShowAndTellResponse.prototype.constructor = MagnetJS.Models.ShowAndTellResponse;

  //-------------model definiton for TrendResponse-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.TrendResponse = function(){
    this.name = 'TrendResponse';

    this.schema = {
      'trend' : {
        type     : 'Trend *',
        optional : false
      }, 
      'status' : {
        type     : 'ResponseStatus ',
        optional : false
      }
    };
    /**
    * @property {Trend * trend]
    * @property {ResponseStatus  status]
    **/
    this.attributes = {
      'trend'                         : null, 
      'status'                        : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.TrendResponse.prototype = new MagnetJS.Model();
  MagnetJS.Models.TrendResponse.prototype.constructor = MagnetJS.Models.TrendResponse;

  //-------------model definiton for Vote-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.Vote = function(){
    this.name = 'Vote';

    this.schema = {
      'id' : {
        type     : 'string',
        optional : false
      }, 
      'text' : {
        type     : 'string',
        optional : false
      }, 
      'count' : {
        type     : 'long',
        optional : false
      }
    };
    /**
    * @property {string id]
    * @property {string text]
    * @property {long count]
    **/
    this.attributes = {
      'id'                            : null, 
      'text'                          : null, 
      'count'                         : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.Vote.prototype = new MagnetJS.Model();
  MagnetJS.Models.Vote.prototype.constructor = MagnetJS.Models.Vote;

  //-------------model definiton for TopicInfo-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.TopicInfo = function(){
    this.name = 'TopicInfo';

    this.schema = {
      'text' : {
        type     : 'string',
        optional : false
      }, 
      'picUrl' : {
        type     : 'string',
        optional : false
      }, 
      'type' : {
        type     : 'TopicType ',
        optional : false
      }, 
      'id' : {
        type     : 'string',
        optional : false
      }, 
      'noAnswers' : {
        type     : 'long',
        optional : false
      }, 
      'author' : {
        type     : 'User *',
        optional : false
      }, 
      'mmxid' : {
        type     : 'string',
        optional : false
      }, 
      'title' : {
        type     : 'string',
        optional : false
      }, 
      'userLike' : {
        type     : 'BOOL',
        optional : false
      }, 
      'created' : {
        type     : 'long',
        optional : false
      }, 
      'updated' : {
        type     : 'long',
        optional : false
      }, 
      'commentsOrVotes' : {
        type     : 'long',
        optional : false
      }, 
      'likes' : {
        type     : 'long',
        optional : false
      }, 
      'yesAnswers' : {
        type     : 'long',
        optional : false
      }
    };
    /**
    * @property {string text]
    * @property {string picUrl]
    * @property {TopicType  type]
    * @property {string id]
    * @property {long noAnswers]
    * @property {User * author]
    * @property {string mmxid]
    * @property {string title]
    * @property {BOOL userLike]
    * @property {long created]
    * @property {long updated]
    * @property {long commentsOrVotes]
    * @property {long likes]
    * @property {long yesAnswers]
    **/
    this.attributes = {
      'text'                          : null, 
      'picUrl'                        : null, 
      'type'                          : null, 
      'id'                            : null, 
      'noAnswers'                     : null, 
      'author'                        : null, 
      'mmxid'                         : null, 
      'title'                         : null, 
      'userLike'                      : null, 
      'created'                       : null, 
      'updated'                       : null, 
      'commentsOrVotes'               : null, 
      'likes'                         : null, 
      'yesAnswers'                    : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.TopicInfo.prototype = new MagnetJS.Model();
  MagnetJS.Models.TopicInfo.prototype.constructor = MagnetJS.Models.TopicInfo;

  //-------------model definiton for IdeaManyResponse-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.IdeaManyResponse = function(){
    this.name = 'IdeaManyResponse';

    this.schema = {
      'total' : {
        type     : 'long',
        optional : false
      }, 
      'ideas' : {
        type     : 'Idea *[]',
        optional : false
      }, 
      'status' : {
        type     : 'ResponseStatus ',
        optional : false
      }
    };
    /**
    * @property {long total]
    * @property {Idea *[] ideas]
    * @property {ResponseStatus  status]
    **/
    this.attributes = {
      'total'                         : null, 
      'ideas'                         : null, 
      'status'                        : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.IdeaManyResponse.prototype = new MagnetJS.Model();
  MagnetJS.Models.IdeaManyResponse.prototype.constructor = MagnetJS.Models.IdeaManyResponse;

  //-------------model definiton for TrendManyResponse-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.TrendManyResponse = function(){
    this.name = 'TrendManyResponse';

    this.schema = {
      'trends' : {
        type     : 'Trend *[]',
        optional : false
      }, 
      'total' : {
        type     : 'long',
        optional : false
      }, 
      'status' : {
        type     : 'ResponseStatus ',
        optional : false
      }
    };
    /**
    * @property {Trend *[] trends]
    * @property {long total]
    * @property {ResponseStatus  status]
    **/
    this.attributes = {
      'trends'                        : null, 
      'total'                         : null, 
      'status'                        : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.TrendManyResponse.prototype = new MagnetJS.Model();
  MagnetJS.Models.TrendManyResponse.prototype.constructor = MagnetJS.Models.TrendManyResponse;

  //-------------model definiton for LoginResponse-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.LoginResponse = function(){
    this.name = 'LoginResponse';

    this.schema = {
      'id' : {
        type     : 'string',
        optional : false
      }, 
      'status' : {
        type     : 'ResponseStatus ',
        optional : false
      }
    };
    /**
    * @property {string id]
    * @property {ResponseStatus  status]
    **/
    this.attributes = {
      'id'                            : null, 
      'status'                        : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.LoginResponse.prototype = new MagnetJS.Model();
  MagnetJS.Models.LoginResponse.prototype.constructor = MagnetJS.Models.LoginResponse;

  //-------------model definiton for UserManyResponse-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.UserManyResponse = function(){
    this.name = 'UserManyResponse';

    this.schema = {
      'total' : {
        type     : 'long',
        optional : false
      }, 
      'users' : {
        type     : 'User *[]',
        optional : false
      }, 
      'status' : {
        type     : 'ResponseStatus ',
        optional : false
      }
    };
    /**
    * @property {long total]
    * @property {User *[] users]
    * @property {ResponseStatus  status]
    **/
    this.attributes = {
      'total'                         : null, 
      'users'                         : null, 
      'status'                        : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.UserManyResponse.prototype = new MagnetJS.Model();
  MagnetJS.Models.UserManyResponse.prototype.constructor = MagnetJS.Models.UserManyResponse;

  //-------------model definiton for Trend-------------
  /**
  * @constructor
  * @memberof MagnetJS.Models
  * @extends MagnetJS.Model
  * @param {object} [attributes] A key-value pair of attributes to be assigned to this Model.
  * @param {boolean} [doValidate] If enabled, validate attributes before set. Default is disabled.
  */
  MagnetJS.Models.Trend = function(){
    this.name = 'Trend';

    this.schema = {
      'id' : {
        type     : 'string',
        optional : false
      }, 
      'author' : {
        type     : 'User *',
        optional : false
      }, 
      'title' : {
        type     : 'string',
        optional : false
      }, 
      'mmxid' : {
        type     : 'string',
        optional : false
      }, 
      'userLike' : {
        type     : 'BOOL',
        optional : false
      }, 
      'picUrl' : {
        type     : 'string',
        optional : false
      }, 
      'updated' : {
        type     : 'long',
        optional : false
      }, 
      'created' : {
        type     : 'long',
        optional : false
      }, 
      'likesCount' : {
        type     : 'long',
        optional : false
      }, 
      'commentsCount' : {
        type     : 'long',
        optional : false
      }, 
      'comments' : {
        type     : 'Comment *[]',
        optional : false
      }
    };
    /**
    * @property {string id]
    * @property {User * author]
    * @property {string title]
    * @property {string mmxid]
    * @property {BOOL userLike]
    * @property {string picUrl]
    * @property {long updated]
    * @property {long created]
    * @property {long likesCount]
    * @property {long commentsCount]
    * @property {Comment *[] comments]
    **/
    this.attributes = {
      'id'                            : null, 
      'author'                        : null, 
      'title'                         : null, 
      'mmxid'                         : null, 
      'userLike'                      : null, 
      'picUrl'                        : null, 
      'updated'                       : null, 
      'created'                       : null, 
      'likesCount'                    : null, 
      'commentsCount'                 : null, 
      'comments'                      : null
    }
    MagnetJS.Model.apply(this, arguments);
  };
  MagnetJS.Models.Trend.prototype = new MagnetJS.Model();
  MagnetJS.Models.Trend.prototype.constructor = MagnetJS.Models.Trend;


})(this['MagnetJS'] || exports, typeof module !== 'undefined' && module.exports && typeof window === 'undefined');