/**
* Generated by Magnet Codegen tool version 2.3.0
*/

(function(exports, isNode){ var MagnetJS = isNode ? require('../../target/magnet-sdk') : exports;

  //-------------service definition for Ideacontroller-------------
  /**
  * @extends MagnetJS.Controller
  * @memberof MagnetJS.Controllers
  * @constructor
  */
  MagnetJS.Controllers.Ideacontroller = function(){};
  MagnetJS.Controllers.Ideacontroller.prototype = new MagnetJS.Controller('Ideacontroller');
  MagnetJS.Controllers.Ideacontroller.prototype.constructor = MagnetJS.Controllers.Ideacontroller;

  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Ideacontroller.createIdea.
  * @typedef {function} Ideacontroller-createIdea
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Ideacontroller
  * @param {object} data The request data.
  * @param {IdeaUpload *} data.body
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Ideacontroller-createIdea} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Ideacontroller.prototype.createIdea = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'createIdea',
        path       : '/api/ideacontroller/createidea',
        method     : 'POST',
        consumes   : ['application/json'],
        returnType : 'ResponseStatus '
      },
      schema : {
        "body" : {
           style    : 'BODY',
           type     : 'IdeaUpload *',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Ideacontroller.getAllIdeas.
  * @typedef {function} Ideacontroller-getAllIdeas
  * @param {IdeaManyResponse *} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Ideacontroller
  * @param {object} data The request data.
  * @param {int} data.offset
  * @param {int} data.page_size
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Ideacontroller-getAllIdeas} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Ideacontroller.prototype.getAllIdeas = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'getAllIdeas',
        path       : '/api/ideacontroller/getallideas',
        method     : 'GET',
        produces   : ['application/json'],
        returnType : 'IdeaManyResponse *'
      },
      schema : {
        "offset" : {
           style    : 'QUERY',
           type     : 'int',
           optional : false
        }, 
        "page_size" : {
           style    : 'QUERY',
           type     : 'int',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Ideacontroller.getDiscussionIdeaById.
  * @typedef {function} Ideacontroller-getDiscussionIdeaById
  * @param {IdeaResponse *} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Ideacontroller
  * @param {object} data The request data.
  * @param {string} data.id
  * @param {int} data.offset
  * @param {int} data.page_size
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Ideacontroller-getDiscussionIdeaById} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Ideacontroller.prototype.getDiscussionIdeaById = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'getDiscussionIdeaById',
        path       : '/api/ideacontroller/getdiscussionidea/{id}',
        method     : 'GET',
        produces   : ['application/json'],
        returnType : 'IdeaResponse *'
      },
      schema : {
        "id" : {
           style    : 'PATH',
           type     : 'string',
           optional : false
        }, 
        "offset" : {
           style    : 'QUERY',
           type     : 'int',
           optional : false
        }, 
        "page_size" : {
           style    : 'QUERY',
           type     : 'int',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Ideacontroller.getVotingIdeaById.
  * @typedef {function} Ideacontroller-getVotingIdeaById
  * @param {IdeaResponse *} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Ideacontroller
  * @param {object} data The request data.
  * @param {string} data.id
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Ideacontroller-getVotingIdeaById} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Ideacontroller.prototype.getVotingIdeaById = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'getVotingIdeaById',
        path       : '/api/ideacontroller/getvotingidea/{id}',
        method     : 'GET',
        produces   : ['application/json'],
        returnType : 'IdeaResponse *'
      },
      schema : {
        "id" : {
           style    : 'PATH',
           type     : 'string',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Ideacontroller.postReply.
  * @typedef {function} Ideacontroller-postReply
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Ideacontroller
  * @param {object} data The request data.
  * @param {string} data.id
  * @param {string} data.text
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Ideacontroller-postReply} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Ideacontroller.prototype.postReply = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'postReply',
        path       : '/api/ideacontroller/replytoidea/{id}',
        method     : 'POST',
        consumes   : ['application/x-www-form-urlencoded'],
        returnType : 'ResponseStatus '
      },
      schema : {
        "id" : {
           style    : 'PATH',
           type     : 'string',
           optional : false
        }, 
        "text" : {
           style    : 'FORM',
           type     : 'string',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Ideacontroller.vote.
  * @typedef {function} Ideacontroller-vote
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Ideacontroller
  * @param {object} data The request data.
  * @param {string} data.id
  * @param {string} data.vote
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Ideacontroller-vote} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Ideacontroller.prototype.vote = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'vote',
        path       : '/api/ideacontroller/vote/{id}',
        method     : 'POST',
        consumes   : ['application/x-www-form-urlencoded'],
        returnType : 'ResponseStatus '
      },
      schema : {
        "id" : {
           style    : 'PATH',
           type     : 'string',
           optional : false
        }, 
        "vote" : {
           style    : 'FORM',
           type     : 'string',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };

  //-------------service definition for Scopes-------------
  /**
  * @extends MagnetJS.Controller
  * @memberof MagnetJS.Controllers
  * @constructor
  */
  MagnetJS.Controllers.Scopes = function(){};
  MagnetJS.Controllers.Scopes.prototype = new MagnetJS.Controller('Scopes');
  MagnetJS.Controllers.Scopes.prototype.constructor = MagnetJS.Controllers.Scopes;

  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Scopes.getScopeMappings.
  * @typedef {function} Scopes-getScopeMappings
  * @param {void} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Scopes
  * @param {object} data The request data.
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Scopes-getScopeMappings} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Scopes.prototype.getScopeMappings = function(options){
    return MagnetJS.Method.call(this, null, options, {
      params : {
        name       : 'getScopeMappings',
        path       : '/api/scopes/list',
        method     : 'GET',
        returnType : 'void'
      },
      schema : {
      }
    });
  };

  //-------------service definition for Trendcontroller-------------
  /**
  * @extends MagnetJS.Controller
  * @memberof MagnetJS.Controllers
  * @constructor
  */
  MagnetJS.Controllers.Trendcontroller = function(){};
  MagnetJS.Controllers.Trendcontroller.prototype = new MagnetJS.Controller('Trendcontroller');
  MagnetJS.Controllers.Trendcontroller.prototype.constructor = MagnetJS.Controllers.Trendcontroller;

  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Trendcontroller.createTrend.
  * @typedef {function} Trendcontroller-createTrend
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Trendcontroller
  * @param {object} data The request data.
  * @param {string} data.body
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Trendcontroller-createTrend} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Trendcontroller.prototype.createTrend = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'createTrend',
        path       : '/api/trendcontroller/createtrend',
        method     : 'POST',
        returnType : 'ResponseStatus '
      },
      schema : {
        "body" : {
           style    : 'BODY',
           type     : 'string',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Trendcontroller.getAllTrends.
  * @typedef {function} Trendcontroller-getAllTrends
  * @param {TrendManyResponse *} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Trendcontroller
  * @param {object} data The request data.
  * @param {int} data.offset
  * @param {int} data.page_size
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Trendcontroller-getAllTrends} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Trendcontroller.prototype.getAllTrends = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'getAllTrends',
        path       : '/api/trendcontroller/getalltrends',
        method     : 'GET',
        produces   : ['application/json'],
        returnType : 'TrendManyResponse *'
      },
      schema : {
        "offset" : {
           style    : 'QUERY',
           type     : 'int',
           optional : false
        }, 
        "page_size" : {
           style    : 'QUERY',
           type     : 'int',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Trendcontroller.getTrend.
  * @typedef {function} Trendcontroller-getTrend
  * @param {TrendResponse *} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Trendcontroller
  * @param {object} data The request data.
  * @param {string} data.id
  * @param {int} data.offset
  * @param {int} data.page_size
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Trendcontroller-getTrend} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Trendcontroller.prototype.getTrend = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'getTrend',
        path       : '/api/trendcontroller/gettrend/{id}',
        method     : 'GET',
        produces   : ['application/json'],
        returnType : 'TrendResponse *'
      },
      schema : {
        "id" : {
           style    : 'PATH',
           type     : 'string',
           optional : false
        }, 
        "offset" : {
           style    : 'QUERY',
           type     : 'int',
           optional : false
        }, 
        "page_size" : {
           style    : 'QUERY',
           type     : 'int',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Trendcontroller.postCommentToTopic.
  * @typedef {function} Trendcontroller-postCommentToTopic
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Trendcontroller
  * @param {object} data The request data.
  * @param {string} data.id
  * @param {string} data.text
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Trendcontroller-postCommentToTopic} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Trendcontroller.prototype.postCommentToTopic = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'postCommentToTopic',
        path       : '/api/trendcontroller/postcomment/{id}',
        method     : 'POST',
        consumes   : ['application/x-www-form-urlencoded'],
        returnType : 'ResponseStatus '
      },
      schema : {
        "id" : {
           style    : 'PATH',
           type     : 'string',
           optional : false
        }, 
        "text" : {
           style    : 'FORM',
           type     : 'string',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Trendcontroller.postLike.
  * @typedef {function} Trendcontroller-postLike
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Trendcontroller
  * @param {object} data The request data.
  * @param {string} data.id
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Trendcontroller-postLike} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Trendcontroller.prototype.postLike = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'postLike',
        path       : '/api/trendcontroller/postlike/{id}',
        method     : 'POST',
        returnType : 'ResponseStatus '
      },
      schema : {
        "id" : {
           style    : 'PATH',
           type     : 'string',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };

  //-------------service definition for Showandtellcontroller-------------
  /**
  * @extends MagnetJS.Controller
  * @memberof MagnetJS.Controllers
  * @constructor
  */
  MagnetJS.Controllers.Showandtellcontroller = function(){};
  MagnetJS.Controllers.Showandtellcontroller.prototype = new MagnetJS.Controller('Showandtellcontroller');
  MagnetJS.Controllers.Showandtellcontroller.prototype.constructor = MagnetJS.Controllers.Showandtellcontroller;

  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Showandtellcontroller.createShowAndTell.
  * @typedef {function} Showandtellcontroller-createShowAndTell
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Showandtellcontroller
  * @param {object} data The request data.
  * @param {string} data.body
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Showandtellcontroller-createShowAndTell} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Showandtellcontroller.prototype.createShowAndTell = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'createShowAndTell',
        path       : '/api/showandtellcontroller/createshowandtell',
        method     : 'POST',
        returnType : 'ResponseStatus '
      },
      schema : {
        "body" : {
           style    : 'BODY',
           type     : 'string',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Showandtellcontroller.getAllShowAndTell.
  * @typedef {function} Showandtellcontroller-getAllShowAndTell
  * @param {ShowAndTellManyResponse *} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Showandtellcontroller
  * @param {object} data The request data.
  * @param {int} data.offset
  * @param {int} data.page_size
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Showandtellcontroller-getAllShowAndTell} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Showandtellcontroller.prototype.getAllShowAndTell = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'getAllShowAndTell',
        path       : '/api/showandtellcontroller/getallshowandtell',
        method     : 'GET',
        produces   : ['application/json'],
        returnType : 'ShowAndTellManyResponse *'
      },
      schema : {
        "offset" : {
           style    : 'QUERY',
           type     : 'int',
           optional : false
        }, 
        "page_size" : {
           style    : 'QUERY',
           type     : 'int',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Showandtellcontroller.getShowAndTell.
  * @typedef {function} Showandtellcontroller-getShowAndTell
  * @param {ShowAndTellResponse *} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Showandtellcontroller
  * @param {object} data The request data.
  * @param {string} data.id
  * @param {int} data.offset
  * @param {int} data.page_size
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Showandtellcontroller-getShowAndTell} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Showandtellcontroller.prototype.getShowAndTell = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'getShowAndTell',
        path       : '/api/showandtellcontroller/getshowandtell/{id}',
        method     : 'GET',
        produces   : ['application/json'],
        returnType : 'ShowAndTellResponse *'
      },
      schema : {
        "id" : {
           style    : 'PATH',
           type     : 'string',
           optional : false
        }, 
        "offset" : {
           style    : 'QUERY',
           type     : 'int',
           optional : false
        }, 
        "page_size" : {
           style    : 'QUERY',
           type     : 'int',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Showandtellcontroller.postCommentToTopic.
  * @typedef {function} Showandtellcontroller-postCommentToTopic
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Showandtellcontroller
  * @param {object} data The request data.
  * @param {string} data.id
  * @param {string} data.text
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Showandtellcontroller-postCommentToTopic} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Showandtellcontroller.prototype.postCommentToTopic = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'postCommentToTopic',
        path       : '/api/showandtellcontroller/postcomment/{id}',
        method     : 'POST',
        consumes   : ['application/x-www-form-urlencoded'],
        returnType : 'ResponseStatus '
      },
      schema : {
        "id" : {
           style    : 'PATH',
           type     : 'string',
           optional : false
        }, 
        "text" : {
           style    : 'FORM',
           type     : 'string',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Showandtellcontroller.postLike.
  * @typedef {function} Showandtellcontroller-postLike
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Showandtellcontroller
  * @param {object} data The request data.
  * @param {string} data.id
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Showandtellcontroller-postLike} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Showandtellcontroller.prototype.postLike = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'postLike',
        path       : '/api/showandtellcontroller/postlike/{id}',
        method     : 'POST',
        returnType : 'ResponseStatus '
      },
      schema : {
        "id" : {
           style    : 'PATH',
           type     : 'string',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };

  //-------------service definition for Usercontroller-------------
  /**
  * @extends MagnetJS.Controller
  * @memberof MagnetJS.Controllers
  * @constructor
  */
  MagnetJS.Controllers.Usercontroller = function(){};
  MagnetJS.Controllers.Usercontroller.prototype = new MagnetJS.Controller('Usercontroller');
  MagnetJS.Controllers.Usercontroller.prototype.constructor = MagnetJS.Controllers.Usercontroller;

  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Usercontroller.createArtist.
  * @typedef {function} Usercontroller-createArtist
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Usercontroller
  * @param {object} data The request data.
  * @param {User *} data.body
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Usercontroller-createArtist} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Usercontroller.prototype.createArtist = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'createArtist',
        path       : '/api/usercontroller/createartist',
        method     : 'POST',
        consumes   : ['application/json'],
        returnType : 'ResponseStatus '
      },
      schema : {
        "body" : {
           style    : 'BODY',
           type     : 'User *',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Usercontroller.createManager.
  * @typedef {function} Usercontroller-createManager
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Usercontroller
  * @param {object} data The request data.
  * @param {User *} data.body
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Usercontroller-createManager} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Usercontroller.prototype.createManager = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'createManager',
        path       : '/api/usercontroller/createmanager',
        method     : 'POST',
        consumes   : ['application/json'],
        returnType : 'ResponseStatus '
      },
      schema : {
        "body" : {
           style    : 'BODY',
           type     : 'User *',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Usercontroller.getAllMangers.
  * @typedef {function} Usercontroller-getAllMangers
  * @param {UserManyResponse *} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Usercontroller
  * @param {object} data The request data.
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Usercontroller-getAllMangers} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Usercontroller.prototype.getAllMangers = function(options){
    return MagnetJS.Method.call(this, null, options, {
      params : {
        name       : 'getAllMangers',
        path       : '/api/usercontroller/getallmanagers',
        method     : 'GET',
        returnType : 'UserManyResponse *'
      },
      schema : {
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Usercontroller.getUser.
  * @typedef {function} Usercontroller-getUser
  * @param {UserResponse *} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Usercontroller
  * @param {object} data The request data.
  * @param {string} data.id
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Usercontroller-getUser} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Usercontroller.prototype.getUser = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'getUser',
        path       : '/api/usercontroller/getuser/{id}',
        method     : 'GET',
        returnType : 'UserResponse *'
      },
      schema : {
        "id" : {
           style    : 'PATH',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Usercontroller.mockLogin.
  * @typedef {function} Usercontroller-mockLogin
  * @param {LoginResponse *} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Usercontroller
  * @param {object} data The request data.
  * @param {string} data.email
  * @param {string} data.password
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Usercontroller-mockLogin} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Usercontroller.prototype.mockLogin = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'mockLogin',
        path       : '/api/usercontroller/mocklogin',
        method     : 'POST',
        consumes   : ['application/x-www-form-urlencoded'],
        produces   : ['application/json'],
        returnType : 'LoginResponse *'
      },
      schema : {
        "email" : {
           style    : 'FORM',
           type     : 'string',
           optional : false
        }, 
        "password" : {
           style    : 'FORM',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Usercontroller.uploadFile.
  * @typedef {function} Usercontroller-uploadFile
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Usercontroller
  * @param {object} data The request data.
  * @param {string} data.body
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Usercontroller-uploadFile} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Usercontroller.prototype.uploadFile = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'uploadFile',
        path       : '/api/usercontroller/uploaduserpic',
        method     : 'PUT',
        consumes   : ['multipart/form-data'],
        returnType : 'ResponseStatus '
      },
      schema : {
        "body" : {
           style    : 'BODY',
           type     : 'string',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };

  //-------------service definition for Config-------------
  /**
  * @extends MagnetJS.Controller
  * @memberof MagnetJS.Controllers
  * @constructor
  */
  MagnetJS.Controllers.Config = function(){};
  MagnetJS.Controllers.Config.prototype = new MagnetJS.Controller('Config');
  MagnetJS.Controllers.Config.prototype.constructor = MagnetJS.Controllers.Config;

  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Config.getConfig.
  * @typedef {function} Config-getConfig
  * @param {string} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Config
  * @param {object} data The request data.
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Config-getConfig} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Config.prototype.getConfig = function(options){
    return MagnetJS.Method.call(this, null, options, {
      params : {
        name       : 'getConfig',
        path       : '/api/config',
        method     : 'GET',
        produces   : ['application/json'],
        returnType : 'string'
      },
      schema : {
      }
    });
  };

  //-------------service definition for Topiccontroller-------------
  /**
  * @extends MagnetJS.Controller
  * @memberof MagnetJS.Controllers
  * @constructor
  */
  MagnetJS.Controllers.Topiccontroller = function(){};
  MagnetJS.Controllers.Topiccontroller.prototype = new MagnetJS.Controller('Topiccontroller');
  MagnetJS.Controllers.Topiccontroller.prototype.constructor = MagnetJS.Controllers.Topiccontroller;

  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Topiccontroller.getLatestTopics.
  * @typedef {function} Topiccontroller-getLatestTopics
  * @param {TopicInfosResponse *} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Topiccontroller
  * @param {object} data The request data.
  * @param {int} data.offset
  * @param {int} data.page_size
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Topiccontroller-getLatestTopics} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Topiccontroller.prototype.getLatestTopics = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'getLatestTopics',
        path       : '/api/topiccontroller/getlatesttopics',
        method     : 'GET',
        produces   : ['application/json'],
        returnType : 'TopicInfosResponse *'
      },
      schema : {
        "offset" : {
           style    : 'QUERY',
           type     : 'int',
           optional : false
        }, 
        "page_size" : {
           style    : 'QUERY',
           type     : 'int',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };

  //-------------service definition for Echo-------------
  /**
  * @extends MagnetJS.Controller
  * @memberof MagnetJS.Controllers
  * @constructor
  */
  MagnetJS.Controllers.Echo = function(){};
  MagnetJS.Controllers.Echo.prototype = new MagnetJS.Controller('Echo');
  MagnetJS.Controllers.Echo.prototype.constructor = MagnetJS.Controllers.Echo;

  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Echo.echo.
  * @typedef {function} Echo-echo
  * @param {EchoResponse *} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Echo
  * @param {object} data The request data.
  * @param {string} data.message
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Echo-echo} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Echo.prototype.echo = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'echo',
        path       : '/api/echo/{message}',
        method     : 'GET',
        produces   : ['application/json'],
        returnType : 'EchoResponse *'
      },
      schema : {
        "message" : {
           style    : 'PATH',
           type     : 'string',
           optional : false
        }
      }
    });
  };

  //-------------service definition for Managercontroller-------------
  /**
  * @extends MagnetJS.Controller
  * @memberof MagnetJS.Controllers
  * @constructor
  */
  MagnetJS.Controllers.Managercontroller = function(){};
  MagnetJS.Controllers.Managercontroller.prototype = new MagnetJS.Controller('Managercontroller');
  MagnetJS.Controllers.Managercontroller.prototype.constructor = MagnetJS.Controllers.Managercontroller;

  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Managercontroller.activateUser.
  * @typedef {function} Managercontroller-activateUser
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Managercontroller
  * @param {object} data The request data.
  * @param {string} data.id
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Managercontroller-activateUser} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Managercontroller.prototype.activateUser = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'activateUser',
        path       : '/api/managercontroller/activateuser/{id}',
        method     : 'POST',
        produces   : ['application/json'],
        returnType : 'ResponseStatus '
      },
      schema : {
        "id" : {
           style    : 'PATH',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Managercontroller.getManagerArtists.
  * @typedef {function} Managercontroller-getManagerArtists
  * @param {UserManyResponse *} response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Managercontroller
  * @param {object} data The request data.
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Managercontroller-getManagerArtists} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Managercontroller.prototype.getManagerArtists = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'getManagerArtists',
        path       : '/api/managercontroller/getmanagerartists',
        method     : 'GET',
        returnType : 'UserManyResponse *'
      },
      schema : {
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Managercontroller.inviteArtist.
  * @typedef {function} Managercontroller-inviteArtist
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Managercontroller
  * @param {object} data The request data.
  * @param {User *} data.body
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Managercontroller-inviteArtist} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Managercontroller.prototype.inviteArtist = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'inviteArtist',
        path       : '/api/managercontroller/inviteartist',
        method     : 'POST',
        consumes   : ['application/json'],
        returnType : 'ResponseStatus '
      },
      schema : {
        "body" : {
           style    : 'BODY',
           type     : 'User *',
           optional : false
        }
      }
    });
  };
  /**
  * This callback is fired after a successful call of MagnetJS.Controllers.Managercontroller.inviteManager.
  * @typedef {function} Managercontroller-inviteManager
  * @param {ResponseStatus } response
  * @param {object} details An object containing details of the request, such as HTTP request, response, and status code.
  * @param {boolean} isCached True if the result came from local cache.
  */
  /**
  * @memberof MagnetJS.Controllers.Managercontroller
  * @param {object} data The request data.
  * @param {User *} data.body
  * @param {string} data.AUTHORIZATION
  * @param {object} options Request options.
  * @param {MagnetJS.CallOptions} [options.callOptions] A CallOptions object.
  * @param {string} [options.callOptions.saveAs] Save to a file. On a Phonegap client, this property designates a filename. On Node.js,
  * this property designates a directory path and filename. Not compatible with Web client.
  * @param {boolean} [options.callOptions.returnRaw] If enabled, return the response as raw data rather than a Model or Collection.
  * @param {Managercontroller-inviteManager} [options.success] Success callback. See Type for return values.
  * @param {ControllerError} [options.error] Error callback. See Type for return values.
  * @returns {MagnetJS.Promise} A MagnetJS.Promise instance.
  */
  MagnetJS.Controllers.Managercontroller.prototype.inviteManager = function(data, options){
    return MagnetJS.Method.call(this, data, options, {
      params : {
        name       : 'inviteManager',
        path       : '/api/managercontroller/invitemanager',
        method     : 'POST',
        consumes   : ['application/json'],
        returnType : 'ResponseStatus '
      },
      schema : {
        "body" : {
           style    : 'BODY',
           type     : 'User *',
           optional : false
        }, 
        "aUTHORIZATION" : {
           style    : 'HEADER',
           type     : 'string',
           optional : false
        }
      }
    });
  };

})(this['MagnetJS'] || exports, typeof module !== 'undefined' && module.exports && typeof window === 'undefined');